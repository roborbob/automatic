{"version":3,"sources":["container/header.js","container/styles.js","components/modelView.js","container/sectionOne.js","container/sectionTwo.js","container/sectionThree.js","container/footer.js","App.js","serviceWorker.js","index.js"],"names":["HeaderWrapper","styled","section","Header","className","SectionWrapper","props","responsive","ViewBox","div","ModelView","scene","renderer","camera","clock","pointLight","pointLight_2","AnimationAnchor","useRef","THREE","background","shadowMap","enabled","type","toneMapping","position","set","setSize","distance","castShadow","shadow","near","far","add","loader","GLTFLoader","useEffect","load","result","robot","y","x","rotation","children","forEach","e","isMesh","receiveShadow","mixer","clip1","animations","clip","clipAction","play","animate","requestAnimationFrame","dt","getDelta","update","render","current","appendChild","domElement","ref","SectionOne","SectionTwo","SectionThree","FooterWrapper","Button","button","ContactWrapper","Footer","AppWrapper","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.48b126d8.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst HeaderWrapper = styled.section`\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    height: 100vh;\n    width: 100%;\n    text-align: center;\n    h1{\n        margin-top: 150px;\n        animation: scale-in-center 2s ease-out both;\n    }\n    @keyframes scale-in-center {\n    0% {\n        -webkit-transform: scale(0);\n                transform: scale(0);\n        opacity: 1;\n    }\n    100% {\n        -webkit-transform: scale(1);\n                transform: scale(1);\n        opacity: 1;\n    }\n    }\n    .arrow {\n        position: relative;\n        background: white;\n        margin: 0 auto;\n        width: 1px;\n        height: 80px;\n        animation: bounce 1s ease infinite alternate;\n        &::after{\n            content: '';\n            position: absolute;\n            top: 68px;\n            transform-origin: center;\n            transform: translateX(-6px) rotate(45deg);\n            width: 10px;\n            height: 10px;\n            border-bottom: 1px solid white;\n            border-right: 1px solid white;\n        }\n    }\n    @keyframes bounce {\n        0% {\n            transform: scale(1) translateY(0);\n        }\n        100% {\n            transform: scale(0.8) translateY(40px);\n        }\n    }\n\n`\n\nconst Header = () => {\n    return (\n        <HeaderWrapper>\n            <h1>automation</h1>\n            <div className=\"arrow\"/>\n        </HeaderWrapper>  \n    )\n}\n\nexport default Header;","import styled from 'styled-components';\n\n\nexport const SectionWrapper = styled.section`\n    display: flex;\n    flex-direction: ${props => props.responsive ? `column-reverse`: `column`};\n    margin: 150px auto;\n    align-items: center;\n    text-align: center;\n    @media (min-width: 769px){\n        flex-direction: row;\n        justify-content: space-around;\n        margin: 200px auto;\n        text-align: left;\n    }\n    h2{\n        text-align: center;\n    }\n    \n`\n","import React, {useRef, useEffect} from 'react';\nimport styled from 'styled-components';\nimport * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\n\n\n\nconst ViewBox = styled.div`\n    // width: 70%;\n    // height: auto;\n`\n\nconst ModelView = (props) => {\n    const AnimationAnchor = useRef();\n\n    let scene, renderer, camera, clock, pointLight, pointLight_2;\n    \n    clock = new THREE.Clock();\n    \n    // Declare a new scene\n    scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x181414)\n\n    // Create new renderer \n    renderer = new THREE.WebGLRenderer();\n\n    // Create shadows;\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n    renderer.toneMapping = THREE.ReinhardToneMapping;\n   \n\n    // Create camera\n    camera = new THREE.PerspectiveCamera( 40, 700 / 500, 1, 2000 );\n    camera.position.set( 0, -11, 40);\n\n    // Create controls to move around the space\n    // controls = new OrbitControls( camera, renderer.domElement);  \n    // // // Constrain viewing angle \n    // controls.maxPolarAngle = Math.PI * 0.45;\n    // controls.maxDistance = 200;\n    // controls.minDistance = 15;\n\n    // Set the size of the render window\n    renderer.setSize(700, 500 );\n\n    // Add light to scene\n    pointLight = new THREE.PointLight(0xfafbff,3);\n    pointLight_2 = new THREE.PointLight(0xfafbff,1);\n    \n    // set its position\n    pointLight.position.set( 250, 0, 250 );\n    pointLight_2.position.set(0,250,500)\n    pointLight.distance = 10000;  \n    pointLight.castShadow = true;\n    pointLight_2.castShadow = true;\n    pointLight.shadow.camera.near = 5;       // default\n    pointLight.shadow.camera.far = 1000 \n    scene.add(pointLight);\n    scene.add(pointLight_2);\n\n\n\n    const animate = function () {\n        requestAnimationFrame( animate );\n        renderer.render( scene, camera );\n    };\n\n\n    // Get the robotarm!!\n    const loader = new GLTFLoader();\n\n    useEffect(() => {  \n        loader.load( 'robot_arm/robotArm_3.glb', result => { \n            \n            let robot = result.scene;\n            robot.position.y = -12;\n            robot.position.x = 0;\n            robot.rotation.y = -1.55\n\n            robot.children.forEach(function(e) {\n                if (e.isMesh) {\n                  e.castShadow = true;\n                  e.receiveShadow = true;\n                }\n              });\n  \n            let mixer = new THREE.AnimationMixer(robot);\n            let clip1 = result.animations[props.clip];\n            let action1 = mixer.clipAction(clip1);\n            action1.play();\n\n            scene.add(robot);\n\n            const animate = () => {\n                requestAnimationFrame( animate );\n                var dt = clock.getDelta()\n                mixer.update(dt);\n                renderer.render( scene, camera );\n            };\n            animate();\n        } );\n\n    }, [])\n\n\n    // Allow useEffect to append the render window, after the container has loaded. Targeting the ref.\n    useEffect(() => {  \n        AnimationAnchor.current.appendChild( renderer.domElement ); \n        animate(); \n        // window.addEventListener( 'resize', onWindowResize, false );\n    }, [])\n\n\n    return <ViewBox ref={AnimationAnchor}/>\n}\n\nexport default ModelView;","import React from 'react';\nimport { Parallax } from 'react-scroll-parallax';\nimport {SectionWrapper} from './styles.js'\nimport ModelView from '../components/modelView';\n\nconst SectionOne = (props) => {\n\n    return (\n        <Parallax  y={[props.y[0],props.y[1]]}>\n            <SectionWrapper >\n                    <h2>Customise</h2>\n                    <ModelView clip={0}/>\n            </SectionWrapper>\n        </Parallax>\n\n    )\n}\n\nexport default SectionOne;","import React from 'react';\nimport {Parallax} from 'react-scroll-parallax';\nimport {SectionWrapper} from './styles'\nimport ModelView from '../components/modelView';\n\nconst SectionTwo = (props) => {\n    return (\n        <Parallax  y={[props.y[0],props.y[1]]}>\n            <SectionWrapper responsive>\n                <ModelView clip={2}/>\n                <h2>Multi Task</h2>\n            </SectionWrapper>\n        </Parallax>\n    )\n}\n\nexport default SectionTwo;","import React from 'react';\nimport {Parallax} from 'react-scroll-parallax';\nimport {SectionWrapper} from './styles.js'\nimport ModelView from '../components/modelView';\n\nconst SectionThree = (props) => {\n    return (\n        <Parallax  y={[props.y[0],props.y[1]]}>\n            <SectionWrapper>\n                <h2>Scale</h2>\n                <ModelView clip={1}/>\n            </SectionWrapper>\n        </Parallax>\n    )\n}\n\nexport default SectionThree;","import React from 'react';\nimport styled from 'styled-components';\n\nconst FooterWrapper = styled.section`\n    position: relative;\n    display: block;\n    height: 50vh;\n    width: 100%;\n    margin: 200px auto 0;\n    \n`\nconst Button = styled.button`\n    border: 1px solid #fafbff;\n    border-radius: 30px;\n    padding: 20px 15px;\n    height: auto;\n    background: none;\n    color: #fafbff;\n    font-family: Helvetica Neue;\n    font-spacing: 0.5em;\n    font-size: 20px;\n    font-weight: 300; \n    transition: 0.3s;\n    &:hover {\n        cursor: pointer;\n        border: 1px solid lightyellow;\n        color: lightyellow;\n    }\n`\n\nconst ContactWrapper = styled.div`\n    display: flex;\n    width: 500px;\n    margin: auto;\n    justify-content: space-between;\n`\n\nconst Footer = () => {\n    return (\n        <FooterWrapper>\n            <ContactWrapper>\n                <Button>Enquire Now</Button>\n                <Button>Information</Button>\n            </ContactWrapper>\n        </FooterWrapper>\n    )\n}\n\nexport default Footer;","import React from 'react';\nimport styled from 'styled-components';\nimport {ParallaxProvider} from 'react-scroll-parallax'\nimport Header from './container/header';\nimport SectionOne from './container/sectionOne';\nimport SectionTwo from './container/sectionTwo';\nimport SectionThree from './container/sectionThree';\nimport Footer from './container/footer';\n\nconst AppWrapper = styled.div`\n  width: 100%;\n  padding: 10px;\n  @media (min-width: 1080px){\n    max-width: 1080px;\n    margin: 0 auto;\n    padding: 20px;\n  }\n`\n\nfunction App() {\n  return (\n    <ParallaxProvider>\n      <AppWrapper className=\"App\">\n        <Header/>\n        <SectionOne y={[-40,20]} x={[-20,0]}/>\n        <SectionTwo y={[-20,10]} x={[-20,0]}/>\n        <SectionThree y={[-40,10]} x={[-20,0]}/>\n        <Footer/>\n      </AppWrapper>\n    </ParallaxProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}